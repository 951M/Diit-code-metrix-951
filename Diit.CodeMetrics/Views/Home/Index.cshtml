    <!DOCTYPE html>
    <html>
    <head>
        <title>lr1</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script src="~/lib/jquery/jquery.min.js"></script>
        <link rel="stylesheet" href="~/lib/codemirror/codemirror.min.css">
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css">
        <link rel="stylesheet" href="~/css/main.css">
        <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
        <script src="~/lib/codemirror/codemirror.min.js"></script>
        <script src="~/lib/codemirror/mode/clike/clike.js"></script>
        <script src="~/lib/sigma.js/sigma.min.js"></script>
        <script src="~/lib/sigma.js/plugins/sigma.parsers.json.min.js"></script>
        <script src="~/lib/arbor/js/arbor.js"></script>
        <script src="~/lib/arbor/js/arbor-full.js"></script>
        <script src="~/lib/arbor/js/arbor-graphics.js"></script>
        <script src="~/lib/arbor/js/arbor-tween.js"></script>
        <script src="~/lib/sigma.js/plugins/sigma.layout.forceAtlas2.min.js"></script>

    </head>
    <body>
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-6">
                    <div class="tabs">
                        <div class="tab-button-outer">
                            <ul id="tab-button">
                                <li><a href="#tab01">Editor</a></li>
                                <li><a href="#tab02">Import</a></li>
                            </ul>
                            <button id="send" type="button" class="btn">Send</button>
                        </div>
                        <div class="tab-select-outer">
                            <select id="tab-select">
                                <option value="#tab01">Editor</option>
                                <option value="#tab02">Import</option>
                            </select>
                        </div>
                        <div id="tab01" class="tab-contents">
                            <div id="editor"></div>
                        </div>
                        <div id="tab02" class="tab-contents">
                            <form><input id="filereader" type="file" name="files" multiple /></form>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div id="graph" class="dropdown">
                        <button class="btn dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true"
                                aria-expanded="false">
                            Select Graph
                        </button>
                        <div id="graph-select" class="dropdown-menu" aria-labelledby="dropdownMenuButton"></div>
                    </div>
                    <canvas id="graph_view" width="800" height="600"></canvas>
                    <textarea id="consolearea" readonly>Information about your code</textarea>
                </div>
            </div>
        </div>
        <script>
            $(function () {

                var Renderer = function (canvas) {
                    var canvas = $(canvas).get(0);
                    var ctx = canvas.getContext("2d");
                    var particleSystem;

                    var that = {
                        init: function (system) {
                            //начальная инициализация
                            particleSystem = system;
                            particleSystem.screenSize(canvas.width, canvas.height);
                            particleSystem.screenPadding(80);
                            that.initMouseHandling();
                        },

                        redraw: function () {
                            //действия при перересовке
                            ctx.fillStyle = "white"; //белым цветом
                            ctx.fillRect(0, 0, canvas.width, canvas.height); //закрашиваем всю область

                            particleSystem.eachEdge( //отрисуем каждую грань
                                function (edge, pt1, pt2) { //будем работать с гранями и точками её начала и конца
                                    ctx.strokeStyle = "rgba(0,0,0, .333)"; //грани будут чёрным цветом с некой прозрачностью
                                    ctx.lineWidth = 1; //толщиной в один пиксель
                                    ctx.beginPath();  //начинаем рисовать
                                    ctx.moveTo(pt1.x, pt1.y); //от точки один
                                    ctx.lineTo(pt2.x, pt2.y); //до точки два
                                    ctx.stroke();
                                });

                            particleSystem.eachNode( //теперь каждую вершину
                                function (node, pt) {  //получаем вершину и точку где она
                                    
                                    var w = 10;   //ширина квадрата
                                    ctx.fillStyle = node.data.color; //с его цветом понятно
                                    ctx.fillRect(pt.x - w / 2, pt.y - w / 2, w, w); //рисуем
                                    ctx.fillStyle = "black"; //цвет для шрифта
                                    ctx.font = 'italic 13px sans-serif'; //шрифт
                                    ctx.fillText(node.data.label, pt.x + 8, pt.y + 8); //пишем имя у каждой точки
                                });
                        },

                        initMouseHandling: function () { //события с мышью
                            var dragged = null;   //вершина которую перемещают
                            var handler = {
                                clicked: function (e) { //нажали
                                    var pos = $(canvas).offset(); //получаем позицию canvas
                                    _mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top); //и позицию нажатия кнопки относительно canvas
                                    dragged = particleSystem.nearest(_mouseP); //определяем ближайшую вершину к нажатию
                                    if (dragged && dragged.node !== null) {
                                        dragged.node.fixed = true; //фиксируем её
                                    }
                                    $(canvas).bind('mousemove', handler.dragged); //слушаем события перемещения мыши
                                    $(window).bind('mouseup', handler.dropped);  //и отпускания кнопки
                                    return false;
                                },
                                dragged: function (e) { //перетаскиваем вершину
                                    var pos = $(canvas).offset();
                                    var s = arbor.Point(e.pageX - pos.left, e.pageY - pos.top);

                                    if (dragged && dragged.node !== null) {
                                        var p = particleSystem.fromScreen(s);
                                        dragged.node.p = p; //тянем вершину за нажатой мышью
                                    }

                                    return false;
                                },
                                dropped: function (e) { //отпустили
                                    if (dragged === null || dragged.node === undefined) return; //если не перемещали, то уходим
                                    if (dragged.node !== null) dragged.node.fixed = false; //если перемещали - отпускаем
                                    dragged = null; //очищаем
                                    $(canvas).unbind('mousemove', handler.dragged); //перестаём слушать события
                                    $(window).unbind('mouseup', handler.dropped);
                                    _mouseP = null;
                                    return false;
                                }
                            }
                            // слушаем события нажатия мыши
                            $(canvas).mousedown(handler.clicked);
                        },

                    }
                    return that;
                }


                var metrics;

                // the staf connected to tabs upper
                var $tabButtonItem = $('#tab-button li'),
                    $tabSelect = $('#tab-select'),
                    $tabContents = $('.tab-contents'),
                    activeClass = 'is-active';

                $tabButtonItem.first().addClass(activeClass);
                $tabContents.not(':first').hide();

                $tabButtonItem.find('a').on('click', function (e) {
                    var target = $(this).attr('href');

                    $tabButtonItem.removeClass(activeClass);
                    $(this).parent().addClass(activeClass);
                    $tabSelect.val(target);
                    $tabContents.hide();
                    $(target).show();
                    e.preventDefault();
                });

                $tabSelect.on('change', function () {
                    var target = $(this).val(),
                        targetSelectNum = $(this).prop('selectedIndex');

                    $tabButtonItem.removeClass(activeClass);
                    $tabButtonItem.eq(targetSelectNum).addClass(activeClass);
                    $tabContents.hide();
                    $(target).show();
                });

                var myCodeMirror = CodeMirror($('#editor')[0], {
                    mode: "text/x-csharp",
                    lineNumbers: true,
                });

                $('#send').click(event => {
                    var send_type = $('#filereader')[0].files.length ? 'project' : 'text';
                    var request_data;

                    if (send_type == 'project') {
                        request_data = new FormData();

                        for (var file of $('#filereader')[0].files) {
                            request_data.append('Files', file);
                        }
                        window.a = request_data;
                        request_data.append("FileType", "cs");
                    } else {
                        request_data = {
                            "source": myCodeMirror.getValue(),
                        };
                    }

                    $.ajax({
                        url: send_type === 'project' ? '/Analyze/LoadFileAndAnalyze' : '/Analyze/LoadStringAndAnalyze',
                        type: "POST",
                        data: send_type === 'project' ? request_data : JSON.stringify(request_data),
                        contentType: send_type === 'project' ? false : 'application/json',
                        processData: send_type === 'project' ? false : true,
                        success: function (response) {
                            metrics = response.metrics
                            let info = `Цикломатическое цисло:${metrics.ComplexityNumber}\n`
                                + JSON.stringify(metrics.HMetrics).replace(/("|{|}|")/gi, '').replace(/(,)/gi, '\n')
                                + JSON.stringify(metrics.GMetrics).replace(/("|{|}|")/gi, '').replace(/(,)/gi, '\n')
                                + '\n\nМЕТРИКА УРОВНЯ КОММЕНТИРОВАННОСТИ ПРОГРАММ\n' + JSON.stringify(metrics.CMetrics).replace(/("|{|}|")/gi, '').replace(/(,)/gi, '\n');
                            $("#consolearea").text(info)
                            $("#graph-select").empty()
                            for (let name of Object.keys(metrics.GraphEntities))
                                $("#graph-select").append(`<a class="dropdown-item" href="#">${name}</a>`)
                        },
                        error: err => console.log(err)
                    });
                });

                $("#graph-select").click(event => draw_graph(metrics.GraphEntities[event.target.innerHTML]))

                function draw_graph(tree) {
                    g = {
                        nodes: [],
                        edges: []
                    };


                    for (let item of tree) {

                        var colorNode = '';
                        var labelNode = '';
                    
                        switch (item.Type) {
                            case "Empty": colorNode = '#666'; labelNode = ''; 
                                break;
                            case "If": colorNode = '#0F0'; labelNode = ''; break;
                            case "Else": colorNode = '#0F0'; labelNode = ''; break;
                            case "Cycle": colorNode = '#FFC107'; labelNode = item.Comment; 
                                break;
                            case "StartProcedure": colorNode = '#F00'; labelNode = item.Comment;
                                break;
                            case "EndProcedure": colorNode = '#000'; labelNode = 'return'; 
                                break;
                        }

                        
                    

                        let curNode = {
                            //p: item.Number,
                            name: 'n' + item.Number,
                            color: colorNode,
                            label: labelNode
                            //size: item.Type == 'Empty' ? 3 : 6,
                        }

                        console.log(curNode)
                   
                        for (let con of item.ConnectedTo)
                            g.edges.push({
                                //id: `n${item.Number}n${con}`,
                                src: 'n' + item.Number ,
                                dest: 'n' +  con 
                                //color: '#ccc'
                            })
                    

                        g.nodes.push(curNode)

                    }

                    sys = arbor.ParticleSystem(1000); // создаём систему
                    sys.parameters({ gravity: true }); // гравитация вкл
                    sys.renderer = Renderer("#graph_view") //начинаем рисовать в выбраной области

                    console.log(g)
                    $.each(g.nodes, function (i, node) {
                        sys.addNode(node.name, node); //добавляем вершину
                    });

                    $.each(g.edges, function (i, edge) {
                        sys.addEdge(sys.getNode(edge.src), sys.getNode(edge.dest)); //добавляем грань
                    });
                }

                function findNode(g, v) {

                    for (let val of g) {
                        if (val.name.match(v) != null) {
                            return val.name;
                        }
                    }

                }
            });



        </script>
    </body>
    </html>
